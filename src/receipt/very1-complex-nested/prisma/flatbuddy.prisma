datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id    String @id
    email String @unique

    name           String
    gender         Gender
    phoneNumber    String
    advertiserType AdvertiserType
    createdAt      DateTime       @default(now())

    post              Post[]
    bedAdvertisment   BedAdvertisment[]
    roomAdvertisment  RoomAdvertisment[]
    houseAdvertisment HouseAdvertisment[]

    manager   User?   @relation("Worker", fields: [managerId], references: [id])
    managerId String?
    workers   User[]  @relation("Worker")
}

model Post {
    id String @id

    user   User   @relation(fields: [userId], references: [id])
    userId String

    title       String
    description String
    moveInFrom  DateTime

    preferredAmenities PreferredAmenity[]
    photos             PostPhoto[]

    preferredLocation   PreferredLocation? @relation(fields: [preferredLocationId], references: [id])
    preferredLocationId String?

    createdAt DateTime @default(now())
}

model PreferredAmenity {
    id     String  @id
    name   String
    postId String?
    Post   Post?   @relation(fields: [postId], references: [id])
}

model PreferredLocation {
    id        String @id
    latitude  Float
    longitude Float
    radius    Float
    Post      Post[]
}

model PostPhoto {
    id             String  @id
    url            String
    Post           Post?   @relation(fields: [postId], references: [id])
    postId         String?
    advertismentId String?
}

model AdvertismentDetail {
    id                  String              @id
    address             String
    floor               String
    availableFrom       DateTime
    minimumStay         DateTime
    maximumStay         DateTime
    scheduleVisits      Boolean
    title               String
    description         String
    photos              AdvertismentPhoto[]
    amenities           AvailableAmenity[]
    houseRules          HouseRule[]
    visitAvailabilities VisitAvailability[]

    advertismentType AdvertismentType

    bedAdvertisment   BedAdvertisment? @relation(fields: [bedAdvertismentId], references: [id])
    bedAdvertismentId String?          @unique

    roomAdvertisment   RoomAdvertisment? @relation(fields: [roomAdvertismentId], references: [id])
    roomAdvertismentId String?           @unique

    houseAdvertisment   HouseAdvertisment? @relation(fields: [houseAdvertismentId], references: [id])
    houseAdvertismentId String?            @unique
}

model AdvertismentPhoto {
    id             String              @id
    url            String
    postId         String?
    Advertisment   AdvertismentDetail? @relation(fields: [advertismentId], references: [id])
    advertismentId String?
}

model BedAdvertisment {
    id String @id

    user   User   @relation(fields: [userId], references: [id])
    userId String

    totalBeds    Int
    beds         Bed[]
    sharedSpaces BedAdvertismentSharedSpaces[]

    existingRoommates  ExistingRoommates?
    bedPreference      BedPreference?
    advertismentDetail AdvertismentDetail?
}

model RoomAdvertisment {
    id String @id

    user   User   @relation(fields: [userId], references: [id])
    userId String

    totalRooms   Int
    rooms        Room[]
    sharedSpaces RoomAdvertismentSharedSpaces[]

    advertismentDetail AdvertismentDetail?
    existingRoommates  ExistingRoommates?
    roomPreference     RoomPreference?
}

model HouseAdvertisment {
    id String @id

    user   User   @relation(fields: [userId], references: [id])
    userId String

    type          HouseType
    totalRooms    Int
    rent          Int
    deposit       Int
    billingPeriod BillingPeriod
    includesBills Boolean
    furnished     Boolean
    rooms         HouseRoom[]

    advertismentDetail AdvertismentDetail?
    housePrefernces    HousePrefernces[]
}

model ExistingRoommates {
    id            String  @id
    malesCount    Int
    femalesCount  Int
    minAge        Int
    maxAge        Int
    professionals Boolean
    students      Boolean

    bedAdvertisment   BedAdvertisment? @relation(fields: [bedAdvertismentId], references: [id])
    bedAdvertismentId String?          @unique

    roomAdvertisment   RoomAdvertisment? @relation(fields: [roomAdvertismentId], references: [id])
    roomAdvertismentId String?           @unique
}

model Bed {
    id                String           @id
    rent              Int
    billingPeriod     BillingPeriod
    deposit           Int
    type              BedType
    BedAdvertisment   BedAdvertisment? @relation(fields: [bedAdvertismentId], references: [id])
    bedAdvertismentId String?
}

model Room {
    id                 String            @id
    RoomFurniture      RoomFurniture[]
    billingPeriod      BillingPeriod
    deposit            Int
    roomSize           Int
    type               RoomType
    attachBathroom     Boolean
    includesBills      Boolean
    RoomAdvertisment   RoomAdvertisment? @relation(fields: [roomAdvertismentId], references: [id])
    roomAdvertismentId String?
}

model HouseRoom {
    id                  String             @id
    type                RoomType
    attachBathroom      Boolean
    HouseAdvertisment   HouseAdvertisment? @relation(fields: [houseAdvertismentId], references: [id])
    houseAdvertismentId String?
}

model BedAdvertismentSharedSpaces {
    id                String           @id
    sharedSpace       SharedSpace
    bedAdvertisment   BedAdvertisment? @relation(fields: [bedAdvertismentId], references: [id])
    bedAdvertismentId String?
}

model RoomAdvertismentSharedSpaces {
    id                 String            @id
    sharedSpace        SharedSpace
    roomAdvertisment   RoomAdvertisment? @relation(fields: [roomAdvertismentId], references: [id])
    roomAdvertismentId String?
}

model AvailableAmenity {
    id                String              @id
    name              String
    bedAdvertismentId String?
    advertisment      AdvertismentDetail? @relation(fields: [advertismentId], references: [id])
    advertismentId    String?
}

model HouseRule {
    id             String              @id
    rule           String
    advertisment   AdvertismentDetail? @relation(fields: [advertismentId], references: [id])
    advertismentId String?
}

model VisitAvailability {
    id                   String              @id
    from                 DateTime
    to                   DateTime
    AdvertismentDetail   AdvertismentDetail? @relation(fields: [advertismentDetailId], references: [id])
    advertismentDetailId String?
}

model BedPreference {
    id            String  @id
    minAge        Int
    maxAge        Int
    females       Boolean
    males         Boolean
    professionals Boolean
    students      Boolean
    smokers       Boolean
    couples       Boolean
    pets          Boolean
    vegetarians   Boolean

    bedAdvertisment   BedAdvertisment @relation(fields: [bedAdvertismentId], references: [id])
    bedAdvertismentId String          @unique
}

model RoomPreference {
    id            String  @id
    minAge        Int
    maxAge        Int
    females       Boolean
    males         Boolean
    professionals Boolean
    students      Boolean
    smokers       Boolean
    couples       Boolean
    pets          Boolean
    vegetarians   Boolean

    roomAdvertisment   RoomAdvertisment @relation(fields: [roomAdvertismentId], references: [id])
    roomAdvertismentId String           @unique
}

model HousePrefernces {
    id            String  @id
    females       Boolean
    males         Boolean
    familys       Boolean
    professionals Boolean
    students      Boolean

    houseAdvertisment   HouseAdvertisment @relation(fields: [houseAdvertismentId], references: [id])
    houseAdvertismentId String            @unique
}

model RoomFurniture {
    id        String    @id
    room      Room      @relation(fields: [roomId], references: [id])
    roomId    String
    furniture Furniture
}

enum Gender {
    MALE
    FEMALE
}

enum AdvertiserType {
    AGENT
    LIVE_IN_LANDLORD
    LIVE_OUT_LANDLORD
    CURRENT_FLATMATE
}

enum Amenity {
    FURNISHED
    INTERNET
    PARKING
    SHARED_LIVING_ROOM
    WASHING_MACHINE
    ENSUIT
}

enum BillingPeriod {
    MONTLY
    QUATERLY
    BIANUALLY
}

enum BedType {
    BUNK
    SINGLE
}

enum RoomType {
    ROOM_TYPE_1
    ROOM_TYPE_2
}

enum HouseType {
    FLAT
    HOUSE
}

enum AdvertismentType {
    BED
    ROOM
    HOUSE
}

enum SharedSpace {
    KITCHEN
    LIVING_ROOM
    BATHROOM
}

enum Day {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum Time {
    MORNING
    AFTERNOON
    EVENING
}

enum Furniture {
    BED
    CUPBOURD
    DRESSING
}
